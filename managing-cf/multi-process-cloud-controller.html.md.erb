---
title: Cloud Controller Multi-Process Mode (Puma)
owner: CAPI
---

This page explains how the Cloud Controller API's Puma webserver handles traffic, and how to scale the Cloud Controller.

## <a id='modes'></a> How Cloud Controller Scaling Works

Im current versions of <%= vars.app_runtime_abbr %>, the Cloud Controller API is published by a Puma webserver, which supports multiple concurrent processes.
This maximizes the efficiency of the VM instances configured to run the Cloud Controller API, which ran in single-process mode in prior <%= vars.app_runtime_abbr %> versions.

<% if vars.platform_code == 'CF' %>
### <a id='multi-process-mode'></a> Scaling in Multi-Process Mode

Using Multi-Process mode (powered by Puma), Cloud Controller can utilize multiple processes (called ‘workers’) to serve traffic on the same port.

Cloud Controller only benefits from multiple workers if there is a CPU core available to each worker.

By default each worker is configured to use 10 threads, meaning each worker can process up to 10 concurrent requests. We don’t recommend configuring more than 20 threads per worker.

More workers on an individual instance results in a higher memory utilization.
<% else %>
<%= partial "/pcf/core/cloud-controller-multi-process-mode" %>
<% end %>

You should configure each API instance to have twice as many local job workers as there are API workers. This can vary depending on foundation load. See [Scaling Local Workers](./scaling-cloud-controller.html#cloud_controller_worker_local) for more details.


## <a id='migrating'></a> Upgrade Automatically Migrates from Single-Process to Multi-Process Mode

With <%= vars.app_runtime_abbr %> versions prior to <%= vars.current_major_version %> that have their Cloud Controller API running in Single-Process mode, upgrading to a newer <%= vars.app_runtime_abbr %> version migrates the Cloud Controller API server to Multi-Process mode.

Typically a Single-Process API instance will support 20 threads.
To ensure parity when migrating to Multi-Process API instances, ensure that the total number of workers multiplied by the number of threads per worker is equal to (or greater than) the number of Single-Process instances multiplied by the number of threads (usually 20).

It’s recommended to initially over-allocate resources and then fine-tune resource allocations after migration, as described in [Post-Migration Fine-Tuning](#fine-tuning).
For example, you might follow any or all of the following strategies:

  - Provision one or more extra API instances than the above concurrent requests calculation would require
  - Keep the thread count per worker less than 20
  - Increase memory for your API instances by a factor of how many workers each instance will have in Multi-Process mode.

### Examples

Here are a few possible configurations that would result in similar number of threads:

|                                         | Single-Process | Profile 1 | Profile 2 | Profile 3 |
| --------------------------------------- | -------------- | --------- | --------- | --------- |
| **VM type**                             | 1 CPU          | 2 CPU     | 4 CPU     | 8 CPU     |
| **# instances**                         | 20             | 10        | 8         | 4         |
| **# API workers**                       | 1 (Thin)       | 2         | 4         | 7         |
| **# threads/worker**                    | 20             | 20        | 13        | 15        |
| **Total concurrent requests supported** | 400            | 400       | 416       | 420       |

**Single-Process mode (deprecated)**: A typical API instance group for Single-Process mode with Thin webserver, used in prior versions of <%= vars.app_runtime_abbr %>.

**Profile 1**: With only 2 cores, this profile is not taking full advantage of Multi-Process support. Since each worker is already configured to use 20 threads, this profile can only be scaled by increasing the number of machine cores or total instances.

**Profile 2**: This profile can be scaled by increasing the number of cores, total instances, or threads.

**Profile 3**: This profile only has 7 API workers for 8 CPU cores. This can be helpful, but not strictly necessary, to ensure colocated processes have enough CPU resources to run. This profile can be scaled by increasing the number of workers to 8 as well as number of cores, total instances, or threads. This profile will be the most demanding in terms of memory footprint.

<% if vars.platform_code != 'CF' %>
<%= partial "/pcf/core/cloud-controller-multi-process" %>
<% else %>
<% end %>

### <a id='fine-tuning'></a> Post-Migration Fine-Tuning

After upgrading, watch the following metrics to see if you can reduce or need to scale up your provisioned resources:

  - `cc.requests.outstanding.gauge`: If this value is at or consistently near the total number of available Puma threads on the VM, you may need to scale your instance group.
  - `system.cpu.user`: This value should stay below 0.85 total utilization.
  - `cc.vitals.cpu_load_avg`: This value should stay below the total number of CPU cores.
